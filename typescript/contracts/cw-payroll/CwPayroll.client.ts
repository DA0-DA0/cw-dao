/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, UncheckedDenom, Curve, Action, Expiration, Timestamp, Uint64, Cw20ReceiveMsg, UncheckedVestingParams, SaturatingLinear, PiecewiseLinear, QueryMsg, CheckedDenom, Addr, Decimal, VestingPaymentStatus, VestingPayment, VestingPaymentRewards, ArrayOfVestingPayment, OwnershipForAddr } from "./CwPayroll.types";
export interface CwPayrollReadOnlyInterface {
  contractAddress: string;
  getVestingPayment: ({
    id
  }: {
    id: number;
  }) => Promise<VestingPayment>;
  listVestingPayments: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<ArrayOfVestingPayment>;
  ownership: () => Promise<OwnershipForAddr>;
}
export class CwPayrollQueryClient implements CwPayrollReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getVestingPayment = this.getVestingPayment.bind(this);
    this.listVestingPayments = this.listVestingPayments.bind(this);
    this.ownership = this.ownership.bind(this);
  }

  getVestingPayment = async ({
    id
  }: {
    id: number;
  }): Promise<VestingPayment> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_vesting_payment: {
        id
      }
    });
  };
  listVestingPayments = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<ArrayOfVestingPayment> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_vesting_payments: {
        limit,
        start_after: startAfter
      }
    });
  };
  ownership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface CwPayrollInterface extends CwPayrollReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  create: ({
    amount,
    denom,
    description,
    recipient,
    title,
    vestingSchedule
  }: {
    amount: Uint128;
    denom: UncheckedDenom;
    description?: string;
    recipient: string;
    title?: string;
    vestingSchedule: Curve;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  distribute: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancel: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  delegate: ({
    amount,
    validator,
    vestingPaymentId
  }: {
    amount: Uint128;
    validator: string;
    vestingPaymentId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  undelegate: ({
    amount,
    validator,
    vestingPaymentId
  }: {
    amount: Uint128;
    validator: string;
    vestingPaymentId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawDelegatorReward: ({
    validator
  }: {
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwPayrollClient extends CwPayrollQueryClient implements CwPayrollInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.create = this.create.bind(this);
    this.distribute = this.distribute.bind(this);
    this.cancel = this.cancel.bind(this);
    this.delegate = this.delegate.bind(this);
    this.undelegate = this.undelegate.bind(this);
    this.withdrawDelegatorReward = this.withdrawDelegatorReward.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  create = async ({
    amount,
    denom,
    description,
    recipient,
    title,
    vestingSchedule
  }: {
    amount: Uint128;
    denom: UncheckedDenom;
    description?: string;
    recipient: string;
    title?: string;
    vestingSchedule: Curve;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create: {
        amount,
        denom,
        description,
        recipient,
        title,
        vesting_schedule: vestingSchedule
      }
    }, fee, memo, funds);
  };
  distribute = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {
        id
      }
    }, fee, memo, funds);
  };
  cancel = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel: {
        id
      }
    }, fee, memo, funds);
  };
  delegate = async ({
    amount,
    validator,
    vestingPaymentId
  }: {
    amount: Uint128;
    validator: string;
    vestingPaymentId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delegate: {
        amount,
        validator,
        vesting_payment_id: vestingPaymentId
      }
    }, fee, memo, funds);
  };
  undelegate = async ({
    amount,
    validator,
    vestingPaymentId
  }: {
    amount: Uint128;
    validator: string;
    vestingPaymentId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      undelegate: {
        amount,
        validator,
        vesting_payment_id: vestingPaymentId
      }
    }, fee, memo, funds);
  };
  withdrawDelegatorReward = async ({
    validator
  }: {
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_delegator_reward: {
        validator
      }
    }, fee, memo, funds);
  };
  updateOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: {}
    }, fee, memo, funds);
  };
}