/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type Addr = string;
export type Uint128 = string;
export interface Config {
  manager?: Addr | null;
  owner?: Addr | null;
  stake_address: Addr;
  token_address: Addr;
  vest_total: Uint128;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  vest: {};
} | {
  claim: {};
} | {
  update_config: {
    manager?: string | null;
    owner?: string | null;
  };
};
export type Binary = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
export interface GetFundingStatusAtHeightResponse {
  activated: boolean;
  height: number;
}
export interface GetVestingStatusAtHeightResponse {
  height: number;
  unvested_staked: Uint128;
  vested_claimed: Uint128;
  vested_staked: Uint128;
  vested_unstaked: Uint128;
  vested_unstaking: Uint128;
}
export type Timestamp = Uint64;
export type Uint64 = string;
export interface InstantiateMsg {
  manager?: string | null;
  owner?: string | null;
  schedules: Schedule[];
  stake_address: string;
  token_address: string;
}
export interface Schedule {
  address: string;
  vests: Vest[];
}
export interface Vest {
  amount: Uint128;
  expiration: Timestamp;
}
export type MigrateMsg = {
  from_beta: {
    manager?: string | null;
  };
} | {
  from_compatible: {};
};
export type QueryMsg = {
  get_vesting_status_at_height: {
    address: string;
    height?: number | null;
  };
} | {
  get_funding_status_at_height: {
    height?: number | null;
  };
} | {
  get_config: {};
};
export interface Cw20VestReadOnlyInterface {
  contractAddress: string;
  getVestingStatusAtHeight: ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }) => Promise<GetVestingStatusAtHeightResponse>;
  getFundingStatusAtHeight: ({
    height
  }: {
    height?: number;
  }) => Promise<GetFundingStatusAtHeightResponse>;
  getConfig: () => Promise<GetConfigResponse>;
}
export class Cw20VestQueryClient implements Cw20VestReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getVestingStatusAtHeight = this.getVestingStatusAtHeight.bind(this);
    this.getFundingStatusAtHeight = this.getFundingStatusAtHeight.bind(this);
    this.getConfig = this.getConfig.bind(this);
  }

  getVestingStatusAtHeight = async ({
    address,
    height
  }: {
    address: string;
    height?: number;
  }): Promise<GetVestingStatusAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_vesting_status_at_height: {
        address,
        height
      }
    });
  };
  getFundingStatusAtHeight = async ({
    height
  }: {
    height?: number;
  }): Promise<GetFundingStatusAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_funding_status_at_height: {
        height
      }
    });
  };
  getConfig = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
}
export interface Cw20VestInterface extends Cw20VestReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: string;
    msg: string;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  vest: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    manager,
    owner
  }: {
    manager?: string;
    owner?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class Cw20VestClient extends Cw20VestQueryClient implements Cw20VestInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.vest = this.vest.bind(this);
    this.claim = this.claim.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: string;
    msg: string;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  vest = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      vest: {}
    }, fee, memo, funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, funds);
  };
  updateConfig = async ({
    manager,
    owner
  }: {
    manager?: string;
    owner?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        manager,
        owner
      }
    }, fee, memo, funds);
  };
}