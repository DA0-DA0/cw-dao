{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "TODO add force transfer TODO more doc strings",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "change_token_factory_admin"
      ],
      "properties": {
        "change_token_factory_admin": {
          "type": "object",
          "required": [
            "new_admin"
          ],
          "properties": {
            "new_admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "change_contract_owner"
      ],
      "properties": {
        "change_contract_owner": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_denom_metadata"
      ],
      "properties": {
        "set_denom_metadata": {
          "type": "object",
          "required": [
            "metadata"
          ],
          "properties": {
            "metadata": {
              "description": "Set denom metadata. see: https://docs.cosmos.network/main/modules/bank#denom-metadata.",
              "allOf": [
                {
                  "$ref": "#/definitions/Metadata"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Grant/revoke mint allowance.",
      "type": "object",
      "required": [
        "set_minter"
      ],
      "properties": {
        "set_minter": {
          "type": "object",
          "required": [
            "address",
            "allowance"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "allowance": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Grant/revoke burn allowance.",
      "type": "object",
      "required": [
        "set_burner"
      ],
      "properties": {
        "set_burner": {
          "type": "object",
          "required": [
            "address",
            "allowance"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "allowance": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Grant/revoke permission to blacklist addresses",
      "type": "object",
      "required": [
        "set_blacklister"
      ],
      "properties": {
        "set_blacklister": {
          "type": "object",
          "required": [
            "address",
            "status"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "status": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Grant/revoke permission to freeze the token",
      "type": "object",
      "required": [
        "set_freezer"
      ],
      "properties": {
        "set_freezer": {
          "type": "object",
          "required": [
            "address",
            "status"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "status": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Mint token to address. Mint allowance is required and wiil be deducted after successful mint.",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "amount",
            "to_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "to_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burn token to address. Burn allowance is required and wiil be deducted after successful burn.",
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "required": [
            "amount",
            "from_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "from_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Block target address from sending/receiving token attached to this contract tokenfactory's beforesend listener must be set to this contract in order for it to work as intended.",
      "type": "object",
      "required": [
        "blacklist"
      ],
      "properties": {
        "blacklist": {
          "type": "object",
          "required": [
            "address",
            "status"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "status": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Block every token transfers of the token attached to this contract tokenfactory's beforesend listener must be set to this contract in order for it to work as intended.",
      "type": "object",
      "required": [
        "freeze"
      ],
      "properties": {
        "freeze": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "DenomUnit": {
      "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token.",
      "type": "object",
      "required": [
        "aliases",
        "denom",
        "exponent"
      ],
      "properties": {
        "aliases": {
          "description": "aliases is a list of string aliases for the given denom",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "denom": {
          "description": "denom represents the string name of the given denom unit (e.g uatom).",
          "type": "string"
        },
        "exponent": {
          "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Metadata": {
      "description": "Metadata represents a struct that describes a basic token.",
      "type": "object",
      "required": [
        "base",
        "denom_units",
        "description",
        "display",
        "name",
        "symbol"
      ],
      "properties": {
        "base": {
          "description": "base represents the base denom (should be the DenomUnit with exponent = 0).",
          "type": "string"
        },
        "denom_units": {
          "description": "denom_units represents the list of DenomUnit's for a given coin",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DenomUnit"
          }
        },
        "description": {
          "type": "string"
        },
        "display": {
          "description": "display indicates the suggested denom that should be displayed in clients.",
          "type": "string"
        },
        "name": {
          "description": "name defines the name of the token (eg: Cosmos Atom)\n\nSince: cosmos-sdk 0.43",
          "type": "string"
        },
        "symbol": {
          "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display.\n\nSince: cosmos-sdk 0.43",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
