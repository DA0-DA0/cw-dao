{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "close_proposals_on_execution_failure",
    "quorum",
    "voting_period"
  ],
  "properties": {
    "close_proposals_on_execution_failure": {
      "type": "boolean"
    },
    "min_voting_period": {
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    },
    "quorum": {
      "$ref": "#/definitions/PercentageThreshold"
    },
    "voting_period": {
      "$ref": "#/definitions/Duration"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PercentageThreshold": {
      "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `yes_votes >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
      "oneOf": [
        {
          "description": "The majority of voters must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
